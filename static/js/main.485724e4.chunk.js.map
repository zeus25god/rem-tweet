{"version":3,"sources":["Components/Buttontwi.js","Redux/action.js","Redux/types.js","Redux/reducer.js","Redux/store.js","App.js","serviceWorker.js","index.js"],"names":["style","Typography","Paragraph","background","padding","Buttontwi","notw","useSelector","state","dispatch","useDispatch","orientation","color","className","span","maxHeight","marginLeft","marginTop","width","type","onClick","margin","initState","twmsg","twet","action","store","createStore","App","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAcMA,GADgBC,IAAdC,UACM,CAAEC,WAAY,UAAWC,QAAS,UAiEjCC,MA/Df,WAGI,IAAMC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,QAClCG,EAAWC,cACjB,OAAS,6BAEL,kBACA,IADA,CACQC,YAAc,UACtB,wBACGX,MACC,CAAEY,MAAO,eAFb,0BAJK,IAUK,kBACV,IADU,KAEV,kBACA,IADA,CACIC,UAAY,aAChBC,KAAS,GACTd,MACI,CAAEe,UAAW,QAASC,WAAY,UAEtC,yBACIhB,MAAUA,GACd,8BACSa,UAAY,MACrBb,MACI,CAAEG,WAAY,QAASc,UAAW,OAAQD,WAAY,OAAQE,MAAO,QAASH,UAAW,SAH7F,KAFA,IAMiB,wBACdf,MACC,CAAEY,MAAO,UAFI,mBAGIN,EAHJ,KANjB,IASmC,kBACnC,IADmC,CAC5Ba,KAAO,UACdC,QACI,kBAAMX,ECjDP,CACHU,KCHgB,eFgDmB,UATnC,MARU,KAVL,IAsCC,kBACN,IADM,KAEN,kBACA,IADA,CACIN,UAAY,aAChBC,KAAS,GACTd,MACI,CAAEqB,OAAQ,uBAEd,yBACIrB,MAAUA,GADd,KANA,KAFM,O,yBG1DRsB,EAAY,CACdhB,KAAM,EACNiB,MAAO,IAcIC,EAZF,WAAgC,IAA/BhB,EAA8B,uDAAtBc,EAAWG,EAAW,uCACxC,OAAQA,EAAON,MACX,IDPgB,WCQZ,OAAO,2BACAX,GADP,IAEIF,KAAME,EAAMF,KAAO,IAE3B,QACI,OAAOE,ICRJkB,EAFDC,YAAYH,GCqBXI,MAlBf,WACI,OAAS,kBACL,IADK,CACIF,MAAUA,GACnB,yBACI1B,MACA,CAAE6B,OAAQ,QAASX,MAAO,SAAUf,WAAY,YAEpD,yBACIU,UAAY,OAChB,kBACA,EADA,OANA,KAFK,MCKOiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.485724e4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport { Typography } from 'antd';\r\nimport { Button } from 'antd';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport { Row, Col, Divider } from 'antd';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { doTweet } from '../Redux/action';\r\n\r\nconst { Paragraph } = Typography;\r\nconst style = { background: '#34416e', padding: '8px 0' };\r\n\r\nfunction Buttontwi() {\r\n\r\n\r\n    const notw = useSelector(state => state.notw)\r\n    const dispatch = useDispatch()\r\n    return ( <\r\n        div >\r\n        <\r\n        Divider orientation = \"center\" >\r\n        <\r\n        h2 style = {\r\n            { color: 'whitesmoke' }\r\n        } > Dissapearing Tweets < /h2>\r\n\r\n        <\r\n        /Divider> <\r\n        Row >\r\n        <\r\n        Col className = \"gutter-row\"\r\n        span = { 18 }\r\n        style = {\r\n            { maxHeight: '200px', marginLeft: '160px' }\r\n        } >\r\n        <\r\n        div style = { style } >\r\n        <\r\n        textarea className = 'txt'\r\n        style = {\r\n            { background: 'white', marginTop: '50px', marginLeft: '30px', width: '700px', maxHeight: '50px' }\r\n        } > < /textarea> <\r\n        h3 style = {\r\n            { color: 'white' }\r\n        } > No of Tweets - { notw } < /h3> <\r\n        Button type = \"primary\"\r\n        onClick = {\r\n            () => dispatch(doTweet())\r\n        } >\r\n        Tweet <\r\n        /Button> < /\r\n        div >\r\n\r\n        <\r\n        /Col> < /\r\n        Row > <\r\n        Row >\r\n        <\r\n        Col className = \"gutter-row\"\r\n        span = { 18 }\r\n        style = {\r\n            { margin: '40px 0px 0px 160px' }\r\n        } >\r\n        <\r\n        div style = { style } > < /div> < /\r\n        Col > <\r\n        /Row>\r\n\r\n\r\n\r\n        <\r\n        /div>\r\n    )\r\n}\r\n\r\nexport default Buttontwi","import { Do_Tweet } from './types'\r\nexport const doTweet = () => {\r\n    return {\r\n        type: Do_Tweet\r\n    }\r\n}","export const Do_Tweet = 'Do_Tweet'","import { Do_Tweet } from './types'\r\nconst initState = {\r\n    notw: 0,\r\n    twmsg: []\r\n}\r\nconst twet = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case Do_Tweet:\r\n            return {\r\n                ...state,\r\n                notw: state.notw + 1\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport default twet","import { createStore } from 'redux'\r\nimport twet from './reducer'\r\n\r\nconst store = createStore(twet)\r\n\r\nexport default store","import React from 'react';\nimport Buttontwi from './Components/Buttontwi';\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport store from './Redux/store'\n\nfunction App() {\n    return ( <\n        Provider store = { store } >\n        <\n        div style = {\n            { height: '620px', width: '1280px', background: '#252C48' }\n        } >\n        <\n        div className = \"App\" >\n        <\n        Buttontwi / >\n        <\n        /div> < /\n        div > <\n        /Provider>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}